Referencia:
	### (modulos que no existen en esta version. Existian antes).


Modulos terminados de chequear:
	* CUser terminado
	* UDataBase terminado, casi completo.
	* USParser listo :).
	* DispObject listo
	* MarquesinObj listo.
	* TextWindow pareceria estar listo.
	* DispObjFilter
	* SServer se podria decir (testeado para un solo cliente, deberia andar
	para mas clientes...).
	* SClient (80 % testeado.. faltaria intentar volver a enviar 2 veces
	seguidas y recibir 2 veces seguidas..).
	* udbprotocol (testeado)
	* ConfigManipulator (testeado y andando)
	* TxtWinControl (testeado, faltan las configuraciones)
	* ObexParser (terminadito :) )
	* PicWinControl (pareceria andar, probablemente habria que agregarle
	mas opciones, y hacerlo mas lindo)
	* PictureWindow (en teoria no hay leaks, faltaria mejorarla).
	* MainWidget
	
	
Modulos en chequeo:
	* dispobjtable NO esta testeado, pero si compilando.
	* UServer (2 version, implementado con SServer).
	

Tareas:
	* Al crear un dispObj que sea del tipo permitido (segun extencion).
	* Si el DispObj a crear es del tipo vnote => parsearlo antes, y luego
	sobreescribir el contenido del archivo, ya que despues lo vamos a
	leer de pecho.
	* Armar un mini ejemplo de funcionamiento con un DispObjFilter,
	con un solo usuario (para la bd, ni importa). Y el MainWidget y todo
	lo demas. (carpeta mini-ejemplo)
	* Agregar el tema de las variables configurables	
	* El tema de guardar las configuraciones, en el txtwincontrol y el
	picwincontrol.
	* "compilando el obexreceiver", falta hacer el modulo de testeo,
	nos vamos a basar en el test de carlox :)....
	* El tema de la tabla (dispobjtable) vamos a manejar las imagenes, 
	por el momento, mostrando el nombre de la imagen, y ante un doble
	click, esta va a ser mostrada por pantalla (falta implementar y 
	testear esto).
	* Chequear el diagrama si falta algo.
	* Testear el verdadero udbserver/UDataBase->server.

Tareas obexserver:
	* Determinar el tema de los tipos de archivos, evitar recibir
	archivos mayores a cierto tamaño, y que no sean formatos € .{bmp,
	png, jpg, jpeg, txt, vnt?..} y si no tiene extencion => es de texto =>
	tiene que tener un tamaño pequeño.
	* Fijarse el tema de los modulos de dbconector que sean "atomicos",
	osea que soporten concurrencia (se debe hacer un solo pedido a la
	vez a la base de datos).
	* Crear N*7 servidores que escuchen en diferentes puertos. Donde N es
	la cantidad de usb dongles. Para cada dongle usar un Thread. Para cada
	servidor de un mismo dongle usar select.
	* Fijarse que cuando se reciba un archivo, si el nombre del archivo
	ya existe => modificarlo y guardarlo con otro nombre.
	* IMPLEMENTAR en vez de PIPE con un socket..
	
UServer:
	* Hacerlo que soporte multiples clientes?.
	* Modularizar UServer y agregarle otra clase UClient que maneje las
	interacciones con el cliente (soporte de multiples clientes).
	
BTSystemManager:
	* Verificar como se van a inicializar los dongles
	* Como se van a reparar (tryToRepairDongles).


* Generar un config_file (parser) para leer las configuraciones de varias cosas:
	* Posicion de la ventana de la marquesina.
	* Tamaño de la fuente.
	* Tamaño de la ventana.
	* Archivo de base de datos.
	* Puerto de escucha del UServer.
	
	
	
	
FINAL:
	* Sacar el flab -g.
	* Sacar el define __DEBUG.
	* Correr el sistema y verificar la memoria que no se vaya con dios
	* Verificar la memoria general del sistema.
	* Fijarse que se vayan borrando los archivos a medida que pasa el tiempo
	y en caso de errores o que sean cancealdos, etc...
	* Generar un directorio aparte donde se van a recibir los archivos (para
	facilitar el tema de la "administracion" de los mismos).
	* IMPORTANTE DE SINCRONIZACION: que pasaria si nos envian una MAC que
	en teoria nosotros desde nuestra base de datos existe, y cuando lo
	recibimos por medio del ObexReceiver, obtenemos que no existe un usuario
	con esa MAC => Deberiamos responderle algo como "tas desincronizado"
	o algo por el estilo...
	




TIPS:
	* Crear el servidor con las interfaces QT => se hace exportable a
	windows el programa directamente :D.
	* Hacerlo mas robusto al protocolo del ObexReceiver (para no perder la
	sincronizacion....)
	* El tema de las fotos, que se muestren no estiradas por completo, si no
	que se muestren de acuerdo al tamaño general de la imagen hasta un
	posible "maximo" tamaño, que va a ser el tamaño de la ventana en si.
	* SClient el tema de las llamadas bloqueantes y no bloqueantes.
	* Modificar que el tamaño de la tabla sea modificable
	
	
	