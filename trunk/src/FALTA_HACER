Referencia:
	### (modulos que no existen en esta version. Existian antes).


Modulos terminados de chequear:
	* CUser terminado
	* UDataBase terminado, casi completo.
	* USParser listo :).
	* DispObject listo
	* MarquesinObj listo.
	* TextWindow pareceria estar listo.
	* DispObjFilter
	* ConfigManipulator (testeado y andando)
	* TxtWinControl (testeado, faltan las configuraciones)
	* ObexParser (terminadito :) )
	* PicWinControl (pareceria andar, probablemente habria que agregarle
	mas opciones, y hacerlo mas lindo)
	* PictureWindow (en teoria no hay leaks, faltaria mejorarla).
	* MainWidget
	
	
Modulos en chequeo:
	* dispobjtable NO esta testeado, pero si compilando.
	

Tareas:
	* MainWidget: estamos incorporando el dispObjFilter a esta clase (para
	tener todo lo GUI aca). Tambien estamos creando un nuevo constructor
	para el dispobjfilter, para evitar el chequeo en la base de datos
	de usuarios.
	* Main: verificar cuando debemos cargar algo de archivo o no (verificar
	si la fecha del ultimo guardado es la misma que la actual por ej).
	* BTCodeAdmin: falta "borrar de archivo un codigo" cuando nos dicen
	que un codigo es "unused". Buscar FIXME
	* HACIENDO MainProg (FIXME! TODO).
	* Al crear un dispObj que sea del tipo permitido (segun extencion).
	* Agregar el tema de las variables configurables	
	* El tema de guardar las configuraciones, en el txtwincontrol y el
	picwincontrol.	
	* El tema de la tabla (dispobjtable) vamos a manejar las imagenes, 
	por el momento, mostrando el nombre de la imagen, y ante un doble
	click, esta va a ser mostrada por pantalla (falta implementar y 
	testear esto).
	


	
BTSystemManager:
	* Verificar como se van a inicializar los dongles
	* Como se van a reparar (tryToRepairDongles).
	* Como hacer el tema de ante una falla, cargar todos los codigos ya 
	utilizados por el btcodeadmin (y tambien ir guardando aquellos que
	ya fueron registrados..)


* Generar un config_file (parser) para leer las configuraciones de varias cosas:
	* Posicion de la ventana de la marquesina.
	* Tamaño de la fuente.
	* Tamaño de la ventana.
	* Archivo de base de datos.
	* Puerto de escucha del UServer.
	
	
	
	
FINAL:
	* Sacar el flab -g.
	* Sacar el define __DEBUG.
	* Correr el sistema y verificar la memoria que no se vaya con dios
	* Verificar la memoria general del sistema.
	* Fijarse que se vayan borrando los archivos a medida que pasa el tiempo
	y en caso de errores o que sean cancealdos, etc...
	* Generar un directorio aparte donde se van a recibir los archivos (para
	facilitar el tema de la "administracion" de los mismos).
	* IMPORTANTE DE SINCRONIZACION: que pasaria si nos envian una MAC que
	en teoria nosotros desde nuestra base de datos existe, y cuando lo
	recibimos por medio del ObexReceiver, obtenemos que no existe un usuario
	con esa MAC => Deberiamos responderle algo como "tas desincronizado"
	o algo por el estilo...
	




TIPS:
	* Crear el servidor con las interfaces QT => se hace exportable a
	windows el programa directamente :D.
	* Hacerlo mas robusto al protocolo del ObexReceiver (para no perder la
	sincronizacion....)
	* El tema de las fotos, que se muestren no estiradas por completo, si no
	que se muestren de acuerdo al tamaño general de la imagen hasta un
	posible "maximo" tamaño, que va a ser el tamaño de la ventana en si.
	* SClient el tema de las llamadas bloqueantes y no bloqueantes.
	* Modificar que el tamaño de la tabla sea modificable
	
	
	