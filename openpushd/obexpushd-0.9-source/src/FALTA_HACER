Haciendo:
	* empezando a hacer el obexonnector.
	* Haciendo la parte donde el usuario esta registrado, y recibimos un archivo
	por lo que tenemos que mandarlo por el obexconnector.
	* Setear el tema de las claves (de donde va a cargar el archivo) que sea
	leido desde un config.file.
	* terminar el obexdbconnector.
	* Arreglar toda la cochinada fea esta por dios!
	* Parsear correctamente las vnote FIXME (el tema de los \n).
	* Verificar si el archivo ya existe => modificarle el nombre al que
	estamos por recibir para evitar problemas de que ya existe el archivo.
	* Verificar si el tipo de archivo que estamos por recibir lo debemos
	recibir usando el ObexFilter.
	* Verificar si la MAC de la conexion que estamos por recibir cosas
	NO esta en la black list (si â‚¬ a la black list => cerramos de una).
	* Cuando terminamos de recibir un archivo, en teoria el protocolo mismo
	nos envia un disconnect, el tema es que supongamos que esto no pasa,
	seguramente el usuario se nos queda ocupando un canal, el cual deberiamos
	liberar, por ejemplo, tras hacer un put_close (tener en cuenta que puede
	que si nos llamen con un disconnect).
	
	


Funcionamiento general:
1) Recibimos una conexion.
2) Verificamos que la nueva conexion no este en la black list.
	2)a) Si esta => cerramos automaticamente la conexion.
3) Verificamos el tipo de archivo que estamos por recibir. Si es del tipo texto
   lo recibimos sin importar nada (ya que puede ser una clave). Si es de otro
   tipo => verificamos que el usuario exista en la base de datos (white list),
   si no existe tal usuario => cancelamos la conexion. Si existe la aceptamos.
4) Antes de escribir el archivo, nos fijamos en el nombre, si existe un archivo
   con el mismo nombre => modificamos el nombre del nuevo archivo para evitar
   inconsistencias.